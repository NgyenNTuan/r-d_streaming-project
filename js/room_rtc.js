const APP_ID = "6a6bbcb63d9642ec8d71de44edd8ca8a"

let uid = sessionStorage.getItem('uid')
if(!uid){
    uid = String(Math.floor(Math.random() * 10000))
    sessionStorage.setItem('uid', uid)
}

// N·∫øu d·ª± √°n c·ªßa b·∫°n k√≠ch ho·∫°t Ch·ª©ng ch·ªâ ·ª©ng d·ª•ng ƒë·ªÉ x√°c th·ª±c M√£ th√¥ng b√°o, h√£y ƒëi·ªÅn gi√° tr·ªã M√£ th√¥ng b√°o ƒë∆∞·ª£c t·∫°o t·∫°i ƒë√¢y
let token = null;
let client;

let rtmClient;
let channel;

const queryString = window.location.search
const urlParams = new URLSearchParams(queryString)
let roomId = urlParams.get('room')

if(!roomId){
    roomId = 'main'
}

let displayName = sessionStorage.getItem('display_name')
if(!displayName){
    window.location = 'index.html'
}

let localTracks = []
let remoteUsers = {}

let localScreenTracks;
let sharingScreen = false;

let joinRoomInit = async () => {
    debugger
    // T·∫°o v√† tr·∫£ v·ªÅ m·ªôt RtmClient instance
    rtmClient = await AgoraRTM.createInstance(APP_ID)
    // ƒêƒÉng nh·∫≠p v√†o h·ªá th·ªëng Agora RTM
    /**
     * - N·∫øu b·∫°n s·ª≠ d·ª•ng Agora RTM SDK c√πng v·ªõi Agora RTC SDK, Agora khuy√™n b·∫°n n√™n tr√°nh ƒëƒÉng nh·∫≠p v√†o h·ªá th·ªëng RTM v√† tham gia k√™nh RTC c√πng m·ªôt l√∫c.
     * - N·∫øu ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p b·∫±ng c√πng m·ªôt uid t·ª´ m·ªôt phi√™n b·∫£n kh√°c, ng∆∞·ªùi d√πng s·∫Ω b·ªã lo·∫°i kh·ªèi th√¥ng tin ƒëƒÉng nh·∫≠p tr∆∞·ªõc ƒë√≥ c·ªßa b·∫°n v√† b·ªã x√≥a 
     * kh·ªèi c√°c k√™nh ƒë√£ tham gia tr∆∞·ªõc ƒë√≥.
     */
    await rtmClient.login({uid,token})

    // Th√™m ho·∫∑c c·∫≠p nh·∫≠t thu·ªôc t√≠nh c·ªßa ng∆∞·ªùi d√πng c·ª•c b·ªô.
    await rtmClient.addOrUpdateLocalUserAttributes({'name':displayName})

    // T·∫°o m·ªôt RtmChannel instance
    channel = await rtmClient.createChannel(roomId)
    // Tham gia m·ªôt k√™nh. Sau khi tham gia k√™nh, ng∆∞·ªùi d√πng c√≥ th·ªÉ nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn k√™nh v√† th√¥ng b√°o v·ªÅ nh·ªØng ng∆∞·ªùi d√πng kh√°c tham gia ho·∫∑c r·ªùi kh·ªèi k√™nh.
    await channel.join()

    // L·∫Øng nghe c√°c s·ª± ki·ªán, ch·∫≥ng h·∫°n nh∆∞ ng∆∞·ªùi d√πng tham gia k√™nh.
    channel.on('MemberJoined', handleMemberJoined)
    // Ng∆∞·ªùi d√πng r·ªùi k√™nh
    channel.on('MemberLeft', handleMemberLeft)
    // Nghe tin nh·∫Øn k√™nh.
    channel.on('ChannelMessage', handleChannelMessage)

    // L·∫•y danh s√°ch th√†nh vi√™n c·ªßa k√™nh.
    getMembers()
    addBotMessageToDom(`Welcome to the room ${displayName}! üëã`)

    // Logic m√£ kh·ªüi t·∫°o, b·∫Øt bu·ªôc. T·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng client c·ª•c b·ªô ƒë·ªÉ qu·∫£n l√Ω cu·ªôc g·ªçi.
    client = AgoraRTC.createClient({mode:'rtc', codec:'vp8'})
    // Cho ph√©p user tham gia m·ªôt room
    await client.join(APP_ID, roomId, token, uid)

    // X·∫£y ra khi ng∆∞·ªùi d√πng t·ª´ xa xu·∫•t b·∫£n b·∫£n √¢m thanh ho·∫∑c video.
    client.on('user-published', handleUserPublished)
    // X·∫£y ra khi ng∆∞·ªùi d√πng t·ª´ xa ngo·∫°i tuy·∫øn.
    client.on('user-left', handleUserLeft)
    // User join v√†o
    client.on('user-joined', handleUserJoined)
    // X·∫£y ra khi ng∆∞·ªùi d√πng t·ª´ xa h·ªßy xu·∫•t b·∫£n b·∫£n √¢m thanh ho·∫∑c video.
    client.on('user-unpublished', handleUserUnPublished)
    client.on('user-info-updated', handleStates1)
    client.on('stream-type-changed', handleStates2)
    client.on('published-user-list', handleStates3)
}

let handleStates1 = async (user, mediaType)=> {
    console.log('stat1', user, mediaType);
}

let handleStates2 = async (user, mediaType)=> {
    console.log('stat2', user, mediaType);
}

let handleStates3 = async (user, mediaType)=> {
    console.log('stat2', user, mediaType);
}

let joinStream = async () => {
    document.getElementById("join-btn").style.display = "none";
    document.getElementsByClassName("stream__actions")[0].style.display =
        "flex";

    var micDevices = AgoraRTC.getMicrophones();
    var cameraDevices = AgoraRTC.getCameras();
    console.log('mic and camera', micDevices, cameraDevices);

    if (cameraDevices.length != undefined && cameraDevices.length != 0) {
        //T·∫°o m·ªôt b·∫£n nh·∫°c √¢m thanh v√† m·ªôt b·∫£n nh·∫°c video.
        localTracks = await AgoraRTC.createMicrophoneAndCameraTracks(
            {},
            {
                encoderConfig: {
                    width: { min: 640, ideal: 1920, max: 1920 },
                    height: { min: 480, ideal: 1080, max: 1080 },
                },
            },
        );
        
        // Ph√°t m·ªôt b·∫£n nh·∫°c ƒëa ph∆∞∆°ng ti·ªán tr√™n trang web.
        localTracks[1].play(`user-${uid}`);
        // Xu·∫•t b·∫£n c√°c b·∫£n √¢m thanh v√†/ho·∫∑c video c·ª•c b·ªô l√™n m·ªôt k√™nh.
        await client.publish([localTracks[0], localTracks[1]]);
    }
    
    let player = `<div class="video__container" id="user-container-${uid}">
                    <div class="video-player" id="user-${uid}"></div>
                 </div>`;

    document
        .getElementById("streams__container")
        .insertAdjacentHTML("beforeend", player);
    document
        .getElementById(`user-container-${uid}`)
        .addEventListener("click", expandVideoFrame);

    if (localTracks.length != 0) {
    }
}

let switchToCamera = async () => {
    let player = `<div class="video__container" id="user-container-${uid}">
                    <div class="video-player" id="user-${uid}"></div>
                 </div>`
    displayFrame.insertAdjacentHTML('beforeend', player)

    // G·ª≠i ho·∫∑c d·ª´ng g·ª≠i d·ªØ li·ªáu ƒëa ph∆∞∆°ng ti·ªán c·ªßa b·∫£n nh·∫°c.
    await localTracks[0].setMuted(true)
    await localTracks[1].setMuted(true)

    document.getElementById('mic-btn').classList.remove('active')
    document.getElementById('screen-btn').classList.remove('active')

    localTracks[1].play(`user-${uid}`)
    await client.publish([localTracks[1]])
}

let handleUserUnPublished = async (user, mediaType) => {
    console.log('unpublished', user, mediaType)
}

let handleUserJoined = async (user, mediaType) => {
    console.log( 'user joined',user.uid, mediaType, uid);

    let player = `<div class="video__container" id="user-container-${uid}">
    <div class="video-player" id="user-${uid}"></div>
 </div>`;

    document
        .getElementById("streams__container")
        .insertAdjacentHTML("beforeend", player);
    document
        .getElementById(`user-container-${uid}`)
        .addEventListener("click", expandVideoFrame);
}

let handleUserPublished = async (user, mediaType) => {
    remoteUsers[user.uid] = user
    console.log( 'user published',user, mediaType, uid);

    // ƒêƒÉng k√Ω c√°c b·∫£n √¢m thanh v√†/ho·∫∑c video c·ªßa ng∆∞·ªùi d√πng t·ª´ xa.
    await client.subscribe(user, mediaType)

    let player = document.getElementById(`user-container-${user.uid}`)
    if(player === null){
        player = `<div class="video__container" id="user-container-${user.uid}">
                <div class="video-player" id="user-${user.uid}"></div>
            </div>`

        document.getElementById('streams__container').insertAdjacentHTML('beforeend', player)
        document.getElementById(`user-container-${user.uid}`).addEventListener('click', expandVideoFrame)
    }

    if(displayFrame.style.display){
        let videoFrame = document.getElementById(`user-container-${user.uid}`)
        videoFrame.style.height = '100px'
        videoFrame.style.width = '100px'
    }

    if(mediaType === 'video'){
        // Ph√°t video t·ª´ xa
        user.videoTrack.play(`user-${user.uid}`)
    }

    if(mediaType === 'audio'){
        // Ph√°t √¢m thanh t·ª´ xa
        user.audioTrack.play()
    }
}

let handleUserLeft = async (user) => {
    console.log('user left')
    delete remoteUsers[user.uid]
    let item = document.getElementById(`user-container-${user.uid}`)
    if(item){
        item.remove()
    }

    if(userIdInDisplayFrame === `user-container-${user.uid}`){
        displayFrame.style.display = null
        
        let videoFrames = document.getElementsByClassName('video__container')

        for(let i = 0; videoFrames.length > i; i++){
            videoFrames[i].style.height = '300px'
            videoFrames[i].style.width = '300px'
        }
    }
}

let toggleMic = async (e) => {
    let button = e.currentTarget

    if(localTracks[0].muted){
        await localTracks[0].setMuted(false)
        button.classList.add('active')
    }else{
        await localTracks[0].setMuted(true)
        button.classList.remove('active')
    }
}

let toggleCamera = async (e) => {
    let button = e.currentTarget

    if(localTracks[1].muted){
        await localTracks[1].setMuted(false)
        button.classList.add('active')
    }else{
        await localTracks[1].setMuted(true)
        button.classList.remove('active')
    }
}

let toggleScreen = async (e) => {
    let screenButton = e.currentTarget
    let cameraButton = document.getElementById('camera-btn')

    if(!sharingScreen){
        sharingScreen = true

        screenButton.classList.add('active')
        cameraButton.classList.remove('active')
        cameraButton.style.display = 'none'

        // T·∫°o m·ªôt ƒëo·∫°n video ƒë·ªÉ chia s·∫ª m√†n h√¨nh.
        localScreenTracks = await AgoraRTC.createScreenVideoTrack()

        document.getElementById(`user-container-${uid}`).remove()
        displayFrame.style.display = 'block'

        let player = `<div class="video__container" id="user-container-${uid}">
                <div class="video-player" id="user-${uid}"></div>
            </div>`

        displayFrame.insertAdjacentHTML('beforeend', player)
        document.getElementById(`user-container-${uid}`).addEventListener('click', expandVideoFrame)

        userIdInDisplayFrame = `user-container-${uid}`
        // Ch·∫°y video m√†n h√¨nh
        localScreenTracks.play(`user-${uid}`)

        // H·ªßy xu·∫•t b·∫£n c√°c b·∫£n √¢m thanh v√†/ho·∫∑c video c·ª•c b·ªô.
        await client.unpublish([localTracks[1]])
        // Xu·∫•t b·∫£n c√°c b·∫£n √¢m thanh v√†/ho·∫∑c video c·ª•c b·ªô l√™n m·ªôt k√™nh.
        await client.publish([localScreenTracks])

        let videoFrames = document.getElementsByClassName('video__container')
        for(let i = 0; videoFrames.length > i; i++){
            if(videoFrames[i].id != userIdInDisplayFrame){
              videoFrames[i].style.height = '100px'
              videoFrames[i].style.width = '100px'
            }
          }

    }else{
        sharingScreen = false 
        cameraButton.style.display = 'block'
        document.getElementById(`user-container-${uid}`).remove()
        await client.unpublish([localScreenTracks])

        switchToCamera()
    }
}

let leaveStream = async (e) => {
    e.preventDefault()

    document.getElementById('join-btn').style.display = 'block'
    document.getElementsByClassName('stream__actions')[0].style.display = 'none'

    for(let i = 0; localTracks.length > i; i++){
        localTracks[i].stop()
        localTracks[i].close()
    }

    await client.unpublish([localTracks[0], localTracks[1]])

    if(localScreenTracks){
        await client.unpublish([localScreenTracks])
    }

    document.getElementById(`user-container-${uid}`).remove()

    if(userIdInDisplayFrame === `user-container-${uid}`){
        displayFrame.style.display = null

        for(let i = 0; videoFrames.length > i; i++){
            videoFrames[i].style.height = '300px'
            videoFrames[i].style.width = '300px'
        }
    }

    // Cho ph√©p ng∆∞·ªùi d√πng g·ª≠i tin nh·∫Øn t·ªõi t·∫•t c·∫£ ng∆∞·ªùi d√πng trong m·ªôt k√™nh.
    channel.sendMessage({text:JSON.stringify({'type':'user_left', 'uid':uid})})
}

document.getElementById('camera-btn').addEventListener('click', toggleCamera)
document.getElementById('mic-btn').addEventListener('click', toggleMic)
document.getElementById('screen-btn').addEventListener('click', toggleScreen)
document.getElementById('join-btn').addEventListener('click', joinStream)
document.getElementById('leave-btn').addEventListener('click', leaveStream)


joinRoomInit()